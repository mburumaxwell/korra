name: Firmware

on:
  push:
    branches: [main]
    tags: ['firmware@*']
    paths:
      - firmware/**
      - .github/workflows/firmware.yml
      - 'package.json'
      - 'turbo.json'
  pull_request:
    branches: [main]
    paths:
      - firmware/**
      - .github/workflows/firmware.yml
      - 'package.json'
      - 'turbo.json'
  workflow_dispatch:

permissions:
  contents: write # write required for ncipollo/release-action to create a release
  attestations: write # required for actions/attest-build-provenance
  id-token: write # required for actions/attest-build-provenance

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TELEMETRY_DISABLED: 1 # Disable Turbo telemetry

jobs:
  Build:
    # using macos-latest because it tends to be faster and closely mirrors dev environment
    runs-on: macos-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          # cache: 'pip' # cache works when there is a requirements.txt, pyproject.toml, poetry.lock or pipfile.lock

      - name: Set up Zephyr SDK
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: ${{ github.workspace }}/firmware
          toolchains: arm-zephyr-eabi:xtensa-espressif_esp32s3_zephyr-elf:riscv64-zephyr-elf

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 24

      - name: Setup turborepo caching
        uses: rharkor/caching-for-turbo@v2.3.2
        with:
          provider: 'github'
          cache-prefix: turbo_firmware_

      - name: Download deps
        run: pnpm install
        working-directory: '${{ github.workspace }}/firmware'

      - name: Restore blobs cache
        id: cache-blobs-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/external/modules/hal/*/zephyr/blobs
          key: blobs-${{ hashFiles('firmware/west.yml') }}
          restore-keys: |
            blobs-

      - name: Fetch Blobs
        run: pnpm blobs:fetch
        working-directory: '${{ github.workspace }}/firmware'

      - name: Build
        run: pnpm turbo build -- --pristine
        working-directory: '${{ github.workspace }}/firmware'

      - name: Collect output
        run: pnpm collect
        working-directory: '${{ github.workspace }}/firmware'

      - name: Upload Artifact (binaries)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/firmware/binaries
          name: binaries
          retention-days: 1

      - name: Provenance Attestation
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: attest
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: ${{ github.workspace }}/firmware/binaries/*.bin

      - name: Upload Release Artifact
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: '${{ github.workspace }}/firmware/binaries/*.bin'
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          tag: ${{ github.ref_name }}

      # Add this firmware to the backend database
      - name: Avail firmware to backend
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        # allow this to fail if the backend is down or something because we can do it manually
        continue-on-error: true
        run: >
          pnpm avail
          --endpoint 'https://korra.maxwellweru.com'
          --api-key '${{ secrets.FIRMWARE_API_KEY }}'
          --attestation '${{ steps.attest.outputs.attestation-url}}'
          --tag '${{ github.ref_name }}'
        working-directory: '${{ github.workspace }}/firmware'

      - name: Save blobs cache
        if: always() && steps.cache-blobs-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/external/modules/hal/*/zephyr/blobs
          key: ${{ steps.cache-blobs-restore.outputs.cache-primary-key }}
