name: Processor

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags: ['processor@*']
    paths:
      - 'processor/**'
      - '.github/workflows/processor.yml'
  pull_request:
    branches: [main]
    paths:
      - 'processor/**'
      - '.github/workflows/processor.yml'

permissions:
  contents: write # write required for ncipollo/release-action to create a release
  packages: write
  attestations: write # required for actions/attest-build-provenance
  id-token: write # required for actions/attest-build-provenance

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # wait for previous runs to complete on main and tags
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/') }}

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # not discovered by default
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }} # not discovered by default
  REVIEW_APP_NAME_SUFFIX: ${{ (github.event_name == 'pull_request' && format('-ra{0}', github.event.number)) || '' }}

jobs:
  Build:
    runs-on: ubuntu-latest

    outputs:
      full_semver: ${{ steps.version.outputs.version }}
      short_sha: ${{ steps.get_sha.outputs.short_sha }}
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4

      - name: Get Version
        uses: mburumaxwell/actions/get-version@main
        id: version
        with:
          path: '${{ github.workspace }}/processor/package.json'

      - name: Get short SHA
        id: get_sha
        run: echo "short_sha=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Test
        run: dotnet test -c Release --collect "Code coverage"
        working-directory: '${{ github.workspace }}/processor/Korra.Processor.Tests'

  Binaries:
    strategy:
      fail-fast: true
      matrix:
        # linux-arm (ArmV7) is not ready for AoT yet (https://github.com/mburumaxwell/azddns/pull/8)
        os: ['macos', 'ubuntu', 'windows']
        arch: ['arm64', 'x64']
        include:
          # list of RIDs (Runtime Identifiers) can be found at:
          # https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json
          - { os: ubuntu, rid-prefix: 'linux' }
          - { os: windows, rid-prefix: 'win' }
          - { os: macos, rid-prefix: 'osx' }
          - { os: windows, archive-type: 'zip' } # windows creates zip files, others default to 'tar'
          # https://github.blog/changelog/2025-01-16-linux-arm64-hosted-runners-now-available-for-free-in-public-repositories-public-preview/
          # https://github.blog/changelog/2025-04-14-windows-arm64-hosted-runners-now-available-in-public-preview
          # macos-latest and macos-14 onwards are arm64 by default
          - { os: ubuntu, arch: 'arm64', runs-on: ubuntu-24.04-arm }
        exclude:
          - { os: macos, arch: 'x64' }
          - { os: windows, arch: 'arm64' }

    runs-on: ${{ matrix.runs-on || format('{0}-{1}', matrix.os, 'latest') }}
    needs: Build

    env:
      FULL_SEM_VER: ${{ needs.Build.outputs.full_semver }}
      DOTNET_RID: ${{ format('{0}-{1}', matrix.rid-prefix, matrix.arch) }}
      ARCHIVE_EXT: ${{ matrix.archive-type || 'tar.gz' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4

      - name: Build & Publish
        run: >
          dotnet publish
          --runtime ${{ env.DOTNET_RID }}
          --configuration Release
          -p:PackageVersion=${{ env.FULL_SEM_VER }}
          -p:VersionPrefix=${{ env.FULL_SEM_VER }}
          --output ${{ github.workspace }}/binaries/${{ env.DOTNET_RID }}
          processor/Korra.Processor/Korra.Processor.csproj

      - name: Remove Debug Symbols
        shell: bash
        run: rm -rf *.pdb *.dbg *.dSYM
        working-directory: ${{ github.workspace }}/binaries/${{ env.DOTNET_RID }}

      - name: Upload Artifact (binaries)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/binaries/**
          name: binaries-${{ env.DOTNET_RID }}
          retention-days: 1

      - name: Create Archive Folder
        run: mkdir ${{ github.workspace }}/releases

      - name: Create Archive (${{ env.ARCHIVE_EXT }})
        uses: thedoctor0/zip-release@main
        with:
          type: ${{ matrix.archive-type || 'tar' }}
          filename: ${{ github.workspace }}/releases/processor-${{ env.FULL_SEM_VER }}-${{ env.DOTNET_RID }}.${{ env.ARCHIVE_EXT }}
          directory: ${{ github.workspace }}/binaries/${{ env.DOTNET_RID }}

      - name: Upload Artifact (releases)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/releases/**
          name: releases-${{ env.DOTNET_RID }}
          retention-days: 1

  Docker:
    runs-on: ubuntu-latest
    needs: [Build, Binaries]

    outputs:
      short_sha: ${{ needs.Build.outputs.short_sha }}

    env:
      IMAGE_NAME: 'korra/processor'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute Docker Tags
        id: docker_tags
        uses: mburumaxwell/actions/compute-docker-tags@main
        with:
          image: 'ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}'
          short_sha: ${{ needs.Build.outputs.short_sha }}
          full_semver: ${{ needs.Build.outputs.full_semver }}
          major: ${{ needs.Build.outputs.major }}
          minor: ${{ needs.Build.outputs.minor }}

      - name: Download Artifact (binaries)
        uses: actions/download-artifact@v4
        with:
          path: binaries
          pattern: binaries-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: ${{ github.workspace }}/processor/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ !contains(github.head_ref, 'changeset-release/') && !contains(github.head_ref, 'dependabot/') }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline # sets BUILDKIT_INLINE_CACHE=1
          tags: >
            ${{ steps.docker_tags.outputs.tags }},
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.Build.outputs.short_sha }}
          labels: |
            org.opencontainers.image.description="Korra Processor"
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ needs.Build.outputs.full_semver }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            com.github.image.run.id=${{ github.run_id }}
            com.github.image.run.number=${{ github.run_number }}
            com.github.image.job.id=${{ github.job }}
            com.github.image.source.sha=${{ github.sha }}
            com.github.image.source.branch=${{ github.ref }}

      - name: Provenance Attestation
        uses: actions/attest-build-provenance@v3
        if: ${{ !contains(github.head_ref, 'changeset-release/') && !contains(github.head_ref, 'dependabot/') }}
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Upload Artifact (binaries)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/binaries/**
          name: binaries
          retention-days: 1

      - name: Delete Artifacts (binaries-*)
        uses: geekyeggo/delete-artifact@v5
        with:
          name: binaries-*

      - name: Download Artifact (releases)
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/releases
          pattern: releases-*
          merge-multiple: true

      - name: Upload Artifact (releases)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/releases/**
          name: releases
          retention-days: 1

      - name: Delete Artifacts (releases-*)
        uses: geekyeggo/delete-artifact@v5
        with:
          name: releases-*

  Deploy:
    runs-on: ubuntu-latest
    needs: [Docker]
    if: ${{ github.ref != 'refs/heads/main' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Compile bicep file to JSON to make it one independent file (without modules)
      - name: Compile bicep file
        run: bicep build 'app.bicep' --outfile 'app.json'
        working-directory: processor

      - name: Replace tokens in deploy files
        uses: qetza/replacetokens-action@v1.2.1
        with:
          sources: 'app*.{yml,yaml,json,jsonc}'
          variables: '[${{ toJSON(env) }},${{ toJSON(vars) }}]' # use env & vars
          log-level: 'debug'
          if-no-files-found: 'error'
          missing-var-log: 'error'
          root: processor
        env:
          DOCKER_IMAGE_TAG: ${{ needs.Docker.outputs.short_sha }}
          PROCESSOR_API_KEY: ${{ secrets.PROCESSOR_API_KEY }}

      - name: Azure Login
        if: ${{ !contains(github.head_ref, 'changeset-release/') && !contains(github.head_ref, 'dependabot/') }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to ContainerApps
        if: ${{ !contains(github.head_ref, 'changeset-release/') && !contains(github.head_ref, 'dependabot/') }}
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: 'processor/app.json'
          parameters: >
            reviewAppNameSuffix=${{ env.REVIEW_APP_NAME_SUFFIX }}
          deploymentName: processor${{ env.DEPLOYMENT_NAME_SUFFIX }}
          scope: 'resourcegroup'
        env:
          DEPLOYMENT_NAME_SUFFIX: ${{ (github.event_name == 'pull_request' && env.REVIEW_APP_NAME_SUFFIX) || format('-{0}', needs.Docker.outputs.short_sha) }}

  Release:
    runs-on: ubuntu-latest
    needs: [Docker]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Download Artifact (releases)
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/releases
          name: releases

      - name: Provenance Attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: ${{ github.workspace }}/releases/*.*

      - name: Upload Release Artifact
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ github.workspace }}/releases/*.*
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          tag: ${{ github.ref_name }}
