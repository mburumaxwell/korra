name: Firmware - PlatformIO

on:
  push:
    branches: [main]
    tags: ['firmware-pio@*']
    paths:
      - firmware-pio/**
      - platformio.ini
      - .github/workflows/firmware-pio.yml
  pull_request:
    branches: [main]
    paths:
      - firmware-pio/**
      - platformio.ini
      - .github/workflows/firmware-pio.yml

permissions:
  contents: write # write required for ncipollo/release-action to create a release
  attestations: write # required for actions/attest-build-provenance
  id-token: write # required for actions/attest-build-provenance

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: 1 # Needed for PlatformIO? https://docs.platformio.org/en/stable/envvars.html#envvar-CI

jobs:
  Build:
    # using macos-latest because it tends to be faster and closely mirrors dev environment
    runs-on: macos-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          # cache: 'pip' # cache works when there is a requirements.txt, pyproject.toml, poetry.lock or pipfile.lock

      - name: Install PlatformIO
        run: pip install --upgrade platformio

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: pnpm

      - name: Download deps
        run: pnpm install
        working-directory: '${{ github.workspace }}/firmware'

      - name: Build
        run: pio run
        # running the below tends to fail but since pio knows how to run parallel, we do not need it to add hacks in CI
        # run: pnpm build
        # working-directory: '${{ github.workspace }}/firmware-pio'

      - name: Collect output
        run: pnpm collect
        working-directory: '${{ github.workspace }}/firmware-pio'

      - name: Upload Artifact (binaries)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/firmware-pio/binaries
          name: binaries
          retention-days: 1

      - name: Provenance Attestation
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ github.workspace }}/firmware-pio/binaries/*.bin

      - name: Upload Release Artifact
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: '${{ github.workspace }}/firmware-pio/binaries/*.bin'
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          tag: ${{ github.ref_name }}

      # Add this firmware to the backend database
      - name: Avail firmware to backend
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        # allow this to fail if the backend is down or something because we can do it manually
        continue-on-error: true
        run: >
          pnpm avail
          --endpoint 'https://korra.maxwellweru.com'
          --api-key '${{ secrets.FIRMWARE_API_KEY }}'
          --attestation '${{ steps.attest.outputs.attestation-url}}'
          --tag '${{ github.ref_name }}'
        working-directory: '${{ github.workspace }}/firmware-pio'
