import path from 'node:path';
import * as semver from 'semver';
import { z } from 'zod/v4';
import dotenv from 'dotenv-flow';

import { type KorraBoardType, type KorraFirmwareFramework, type KorraUsageType } from '../src/lib/schemas.ts';

const GithubReleaseSchema = z.object({
  tag_name: z.string(),
  created_at: z.coerce.date(),
  assets: z
    .object({
      name: z.string(),
      digest: z.string(),
      browser_download_url: z.url(),
    })
    .array(),
});

function getAppVersionNumber(value: string) {
  // we need to generate the same value as APP_VERSION_NUMBER in version.h generated by version.py
  const version = semver.parse(value);
  if (!version) throw new Error(`Invalid version: ${value}`);

  // e.g. 0.4.0 â†’ 0x000400 in hex which is 1024 in decimal. We need decimal version
  const v = (version.major << 16) | (version.minor << 8) | version.patch;
  return v;
}

async function importFirmware() {
  dotenv.config();
  const { prisma } = await import('../src/lib/prisma/index.ts');
  const response = await fetch('https://api.github.com/repos/mburumaxwell/korra/releases');
  const releasesData = await response.json();
  const releases = GithubReleaseSchema.array().parse(releasesData);

  for (const release of releases) {
    const { created_at: created, tag_name } = release;
    const [folder, versionSemver] = tag_name.split('@');
    if (!folder.includes('firmware')) continue;

    console.log('working on', tag_name);
    const versionValue = getAppVersionNumber(versionSemver);

    for (const asset of release.assets) {
      const { browser_download_url } = asset;
      const filename = path.parse(path.basename(browser_download_url)).name;
      // example URL for zephyr: https://github.com/mburumaxwell/korra/releases/download/firmware%400.2.2/keeper-esp32s3_devkitc.bin
      // example URL for arduino-pio: https://github.com/mburumaxwell/korra/releases/download/firmware-pio%400.4.1/arduino-keeper-esp32-s3-devkitc.bin
      // example URL for arduino-pio: https://github.com/mburumaxwell/korra/releases/download/firmware-pio%400.4.1/arduino-keeper-esp32s3_devkitc.bin
      let framework: KorraFirmwareFramework;
      let board: KorraBoardType;
      let usage: KorraUsageType;
      if (folder === 'firmware') {
        framework = 'zephyr';
        // @ts-expect-error - forcing enum values
        [usage, board] = filename.split('-');
      } else if (folder === 'firmware-pio') {
        // @ts-expect-error - forcing enum values
        [framework, usage] = filename.split('-');
        // here we only have esp32
        board = 'esp32s3_devkitc';
      } else {
        throw new Error('This should not happen');
      }
      await prisma.availableFirmware.upsert({
        where: {
          board_usage_framework_versionSemver: {
            board,
            usage,
            framework,
            versionSemver,
          },
        },
        create: {
          created,
          board,
          usage,
          framework,
          versionSemver,

          versionValue,
          url: browser_download_url,
          attestation: 'tbd', // TODO; figure this out some day
          hash: 'tbd', // no source as of now
          signature: 'tbd', // TODO; pull signature from attestation URL
        },
        update: {
          versionValue,
          url: browser_download_url,
          attestation: 'tbd', // TODO; figure this out some day
          hash: 'tbd', // no source as of now
          signature: 'tbd', // TODO; pull signature from attestation URL
        },
      });
    }
  }
}

await importFirmware();
